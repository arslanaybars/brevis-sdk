// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import "@openzeppelin/contracts/access/Ownable.sol";

import "../../framework/BrevisApp.sol";
import "../../interface/IBrevisProof.sol";

contract AccountAgeExample is BrevisApp, Ownable {
    event AccountAgeAttested(address account, uint64 blockNum);

    bytes32 public vkHash;

    constructor(address brevisProof) BrevisApp(IBrevisProof(brevisProof)) {}

    // BrevisQuery contract will call our callback once Brevis backend submits the proof.
    // This method is called with once the proof is verified.
    function handleProofResult(
        bytes32 /*_requestId*/,
        bytes32 _vkHash,
        bytes calldata _circuitOutput
    ) internal override {
        // We need to check if the verifying key that Brevis used to verify the proof
        // generated by our circuit is indeed our designated verifying key. This proves
        // that the _circuitOutput is authentic
        require(vkHash == _vkHash, "invalid vk");
        (address contractAddr, uint64 blockNum, uint64 nonce) = decodeOutput(_circuitOutput);
        require(nonce == 0, "not first tx");
        emit AccountAgeAttested(contractAddr, blockNum);
    }

    // In guest circuit we have:
    // api.OutputAddress(c.UserAddr)
    // api.OutputUint(64, block)
    // api.OutputUint(64, c.Nonce)
    function decodeOutput(bytes calldata o) internal pure returns (address, uint64, uint64) {
        address userAddr = address(bytes20(o[0:20]));
        uint64 blockNum = uint64(bytes8(o[20:28]));
        uint64 nonce = uint64(bytes8(o[28:36]));
        return (userAddr, blockNum, nonce);
    }

    function setVkHash(bytes32 _vkHash) external onlyOwner {
        vkHash = _vkHash;
    }
}
